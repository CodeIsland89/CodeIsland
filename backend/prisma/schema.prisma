generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Member {
  member_id      Int     @id @default(autoincrement())
  email          String  @unique
  password       String
  is_enabled     Boolean @default(true)
  MemberIsland   MemberIsland[]
  Profile        Profile?
  Role           Role[]
}

model Profile {
  member_id    Int     @id
  member       Member  @relation(fields: [member_id], references: [member_id])
  continuous_day Int     @default(0)
  exp          Int     @default(0)
  gem          Int     @default(0)
  nickname     String
  img_source_url   String?
}

model Role {
  role_id   Int      @id @default(autoincrement())
  role_name String   @unique
  Member    Member[]
  Action    Action[]
}

model Action {
  action_id   Int      @id @default(autoincrement())
  action_name String   @unique
  Role        Role[]
}

model Island {
  island_id   Int       @id @default(autoincrement())
  island_name String    @unique
  img_source_url  String?   @unique
  Chapter     Chapter[]
  MemberIsland MemberIsland[]
}

model MemberIsland {
  member_id   Int
  island_id   Int
  chapter_status_id Int
  lesson_status_id Int
  member      Member @relation(fields: [member_id], references: [member_id])
  island      Island @relation(fields: [island_id], references: [island_id])
  chapter_status Chapter @relation(fields: [chapter_status_id], references: [chapter_id])
  lesson_status Lesson @relation(fields: [lesson_status_id], references: [lesson_id])
  @@id([member_id, island_id])
}

model Chapter {
  chapter_id     Int    @id @default(autoincrement())
  chapter_name   String @unique
  chapter_detail String
  chapter_order  Int  @unique
  island         Island @relation(fields: [island_id], references: [island_id])
  island_id      Int
  Lesson     Lesson[]
  ChapterStatus MemberIsland[]
  @@unique([island_id, chapter_order])
}

model Lesson {
  lesson_id     Int      @id @default(autoincrement())
  lesson_name   String   @unique
  lesson_order  Int
  chapter       Chapter  @relation(fields: [chapter_id], references: [chapter_id])
  chapter_id    Int
  Quiz      Quiz[]
  LessonStatus MemberIsland[]
  @@unique([chapter_id, lesson_order])
}

enum QuizType {
  TESTSET
  OPTION
}
model Quiz {
  quiz_id     Int     @id @default(autoincrement())
  quiz_describe   String 
  quiz_type QuizType
  lesson     Lesson  @relation(fields: [lesson_id], references: [lesson_id])
  lesson_id  Int
  TestSet    TestSet[]
  Option     Option[]
}

model TestSet {
  testset_id     Int     @id @default(autoincrement())
  input          String
  output         String
  quiz      Quiz  @relation(fields: [quiz_id], references: [quiz_id])
  quiz_id   Int
  @@unique([input, output])
}

model Option {
  option_id     Int     @id @default(autoincrement())
  option_describe   String
  is_answer    Boolean
  quiz      Quiz  @relation(fields: [quiz_id], references: [quiz_id])
  quiz_id   Int
}
